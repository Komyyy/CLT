/-
Copyright (c) 2025 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathlib.Probability.Variance

/-!
# Covariance of real random variables

-/

open MeasureTheory
open scoped ENNReal NNReal

namespace ProbabilityTheory

variable {Œ© : Type*} {mŒ© : MeasurableSpace Œ©} {X Y Z : Œ© ‚Üí ‚Ñù} {Œº : Measure Œ©}

variable (X Y Œº) in
/-- The covariance of two real-valued random variables defined as
the integral of `(X - ùîº[X])(Y - ùîº[Y])`. -/
noncomputable def covariance : ‚Ñù := ‚à´ œâ, (X œâ - Œº[X]) * (Y œâ - Œº[Y]) ‚àÇŒº

@[inherit_doc]
scoped notation "cov[" X ", " Y "; " Œº "]" => ProbabilityTheory.covariance X Y Œº

/-- The covariance of the real-valued random variables `X` and `Y`
according to the volume measure. -/
scoped notation "cov[" X ", " Y "]" => cov[X, Y; MeasureTheory.MeasureSpace.volume]

lemma covariance_self {X : Œ© ‚Üí ‚Ñù} (hX : AEMeasurable X Œº) :
    cov[X, X; Œº] = Var[X; Œº] := by
  rw [covariance, variance_eq_integral hX]
  congr with x
  ring

@[simp] lemma covariance_zero_left : cov[0, Y; Œº] = 0 := by simp [covariance]

@[simp] lemma covariance_zero_right : cov[X, 0; Œº] = 0 := by simp [covariance]

@[simp] lemma covariance_zero_measure : cov[X, Y; (0 : Measure Œ©)] = 0 := by simp [covariance]

lemma covariance_add_left [IsFiniteMeasure Œº]
    (hX : MemLp X 2 Œº) (hY : MemLp Y 2 Œº) (hZ : MemLp Z 2 Œº) :
    cov[X + Y, Z; Œº] = cov[X, Z; Œº] + cov[Y, Z; Œº] := by
  simp_rw [covariance]
  simp only [Pi.add_apply]
  rw [‚Üê integral_add]
  ¬∑ congr with x
    rw [integral_add]
    rotate_left
    ¬∑ exact hX.integrable (by simp)
    ¬∑ exact hY.integrable (by simp)
    ring
  ¬∑ refine MemLp.integrable_mul (q := 2) (p := 2) ?_ ?_
    ¬∑ exact hX.sub (memLp_const _)
    ¬∑ exact hZ.sub (memLp_const _)
  ¬∑ refine MemLp.integrable_mul (q := 2) (p := 2) ?_ ?_
    ¬∑ exact hY.sub (memLp_const _)
    ¬∑ exact hZ.sub (memLp_const _)

lemma covariance_add_right [IsFiniteMeasure Œº]
    (hX : MemLp X 2 Œº) (hY : MemLp Y 2 Œº) (hZ : MemLp Z 2 Œº) :
    cov[X, Y + Z; Œº] = cov[X, Y; Œº] + cov[X, Z; Œº] := by
  simp_rw [covariance]
  simp only [Pi.add_apply]
  rw [‚Üê integral_add]
  ¬∑ congr with x
    rw [integral_add]
    rotate_left
    ¬∑ exact hY.integrable (by simp)
    ¬∑ exact hZ.integrable (by simp)
    ring
  ¬∑ refine MemLp.integrable_mul (q := 2) (p := 2) ?_ ?_
    ¬∑ exact hX.sub (memLp_const _)
    ¬∑ exact hY.sub (memLp_const _)
  ¬∑ refine MemLp.integrable_mul (q := 2) (p := 2) ?_ ?_
    ¬∑ exact hX.sub (memLp_const _)
    ¬∑ exact hZ.sub (memLp_const _)

lemma covariance_smul_left (c : ‚Ñù) :
    cov[c ‚Ä¢ X, Y; Œº] = c * cov[X, Y; Œº] := by
  simp_rw [covariance]
  simp only [Pi.smul_apply, smul_eq_mul]
  simp_rw [‚Üê integral_mul_left, ‚Üê mul_assoc, mul_sub]
  congr with œâ
  congr <;> rw [integral_mul_left]

lemma covariance_smul_right (c : ‚Ñù) :
    cov[X, c ‚Ä¢ Y; Œº] = c * cov[X, Y; Œº] := by
  simp_rw [covariance]
  simp only [Pi.smul_apply, smul_eq_mul]
  simp_rw [‚Üê integral_mul_left, ‚Üê mul_assoc, mul_comm c, mul_assoc, mul_sub, mul_comm c]
  congr with œâ
  rw [integral_mul_right]

@[simp]
lemma covariance_neg_left : cov[-X, Y; Œº] = -cov[X, Y; Œº] := by
  calc cov[-X, Y; Œº]
  _ = cov[(-1 : ‚Ñù) ‚Ä¢ X, Y; Œº] := by simp
  _ = - cov[X, Y; Œº] := by rw [covariance_smul_left]; simp

@[simp]
lemma covariance_neg_right : cov[X, -Y; Œº] = -cov[X, Y; Œº] := by
  calc cov[X, -Y; Œº]
  _ = cov[X, (-1 : ‚Ñù) ‚Ä¢ Y; Œº] := by simp
  _ = - cov[X, Y; Œº] := by rw [covariance_smul_right]; simp

lemma covariance_sub_left [IsFiniteMeasure Œº]
    (hX : MemLp X 2 Œº) (hY : MemLp Y 2 Œº) (hZ : MemLp Z 2 Œº) :
    cov[X - Y, Z; Œº] = cov[X, Z; Œº] - cov[Y, Z; Œº] := by
  simp_rw [sub_eq_add_neg]
  rw [covariance_add_left hX hY.neg hZ, covariance_neg_left]

lemma covariance_sub_right [IsFiniteMeasure Œº]
    (hX : MemLp X 2 Œº) (hY : MemLp Y 2 Œº) (hZ : MemLp Z 2 Œº) :
    cov[X, Y - Z; Œº] = cov[X, Y; Œº] - cov[X, Z; Œº] := by
  simp_rw [sub_eq_add_neg]
  rw [covariance_add_right hX hY hZ.neg, covariance_neg_right]

end ProbabilityTheory
