/-
Copyright (c) 2025 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Clt.CharFun
import Clt.Prokhorov

/-!
# Tightness and characteristic functions

-/

open MeasureTheory ProbabilityTheory Filter
open scoped ENNReal NNReal Topology RealInnerProductSpace

variable {E : Type*} {mE : MeasurableSpace E} [NormedAddCommGroup E]

lemma tendsto_measure_norm_gt_of_isTightMeasureSet
    {S : Set (Measure E)} (hS : IsTightMeasureSet S) :
    Tendsto (fun (r : ‚Ñù) ‚Ü¶ ‚®Ü Œº ‚àà S, Œº {x | r < ‚Äñx‚Äñ}) atTop (ùìù 0) := by
  rw [IsTightMeasureSet_iff_exists_isCompact_measure_compl_le] at hS
  rw [ENNReal.tendsto_atTop_zero]
  intro Œµ hŒµ
  obtain ‚ü®K, hK_compact, h‚ü© := hS Œµ hŒµ
  rcases Set.eq_empty_or_nonempty K with rfl | hK_nonempty
  ¬∑ simp only [Set.compl_empty] at h
    refine ‚ü®0, fun _ _ ‚Ü¶ ?_‚ü©
    simp only [iSup_le_iff]
    exact fun Œº hŒºS ‚Ü¶ (measure_mono (Set.subset_univ _)).trans (h Œº hŒºS)
  obtain ‚ü®r, h_subset‚ü© : ‚àÉ r, K ‚äÜ {x | ‚Äñx‚Äñ ‚â§ r} := by
    obtain ‚ü®xmax, _, hxmax‚ü© : ‚àÉ x ‚àà K, IsMaxOn (fun x ‚Ü¶ ‚Äñx‚Äñ) K x :=
      hK_compact.exists_isMaxOn (f := fun x : E ‚Ü¶ ‚Äñx‚Äñ) hK_nonempty (by fun_prop)
    exact ‚ü®‚Äñxmax‚Äñ, fun x hxK ‚Ü¶ hxmax hxK‚ü©
  refine ‚ü®r, fun u hu ‚Ü¶ ?_‚ü©
  simp only [iSup_le_iff]
  intro Œº hŒºS
  refine (measure_mono ?_).trans (h Œº hŒºS)
  simp_rw [‚Üê not_le]
  refine Set.compl_subset_compl.mp ?_
  simp only [compl_compl, not_le]
  refine h_subset.trans fun x ‚Ü¶ ?_
  simp only [Set.mem_setOf_eq, Set.mem_compl_iff, not_lt]
  exact fun hx ‚Ü¶ hx.trans hu

section FiniteDimensional

lemma isTightMeasureSet_of_tendsto_measure_norm_gt [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
    {S : Set (Measure E)} (h : Tendsto (fun (r : ‚Ñù) ‚Ü¶ ‚®Ü Œº ‚àà S, Œº {x | r < ‚Äñx‚Äñ}) atTop (ùìù 0)) :
    IsTightMeasureSet S := by
  rw [IsTightMeasureSet_iff_exists_isCompact_measure_compl_le]
  intro Œµ hŒµ
  rw [ENNReal.tendsto_atTop_zero] at h
  obtain ‚ü®r, h‚ü© := h Œµ hŒµ
  specialize h r le_rfl
  refine ‚ü®Metric.closedBall 0 r, isCompact_closedBall 0 r, ?_‚ü©
  simp only [iSup_le_iff] at h
  convert h using 4 with Œº hŒº
  ext
  simp

lemma isTightMeasureSet_iff_tendsto_measure_norm_gt [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
    (S : Set (Measure E)) :
    IsTightMeasureSet S
      ‚Üî Tendsto (fun (r : ‚Ñù) ‚Ü¶ ‚®Ü Œº ‚àà S, Œº {x | r < ‚Äñx‚Äñ}) atTop (ùìù 0) :=
  ‚ü®tendsto_measure_norm_gt_of_isTightMeasureSet, isTightMeasureSet_of_tendsto_measure_norm_gt‚ü©

lemma tendsto_iSup_of_tendsto_limsup {u : ‚Ñï ‚Üí ‚Ñù ‚Üí ‚Ñù‚â•0‚àû}
    (h_all : ‚àÄ n, Tendsto (u n) atTop (ùìù 0))
    (h_tendsto : Tendsto (fun r : ‚Ñù ‚Ü¶ limsup (fun n ‚Ü¶ u n r) atTop) atTop (ùìù 0))
    (h_anti : ‚àÄ n, Antitone (u n)) :
    Tendsto (fun r : ‚Ñù ‚Ü¶ ‚®Ü n, u n r) atTop (ùìù 0) := by
  simp_rw [ENNReal.tendsto_atTop_zero] at h_tendsto h_all ‚ä¢
  intro Œµ hŒµ
  by_cases hŒµ_top : Œµ = ‚àû
  ¬∑ refine ‚ü®0, fun _ _ ‚Ü¶ by simp [hŒµ_top]‚ü©
  simp only [gt_iff_lt, ge_iff_le] at h_tendsto h_all hŒµ
  obtain ‚ü®r, h‚ü© := h_tendsto (Œµ / 2) (ENNReal.half_pos hŒµ.ne')
  have h' x (hx : r ‚â§ x) y (hy : Œµ / 2 < y) : ‚àÄ·∂† n in atTop, u n x < y := by
    specialize h x hx
    rw [limsup_le_iff] at h
    exact h y hy
  replace h' : ‚àÄ x, r ‚â§ x ‚Üí ‚àÄ·∂† n in atTop, u n x < Œµ :=
    fun x hx ‚Ü¶ h' x hx Œµ (ENNReal.half_lt_self hŒµ.ne' hŒµ_top)
  simp only [eventually_atTop, ge_iff_le] at h'
  obtain ‚ü®N, h‚ü© := h' r le_rfl
  replace h_all : ‚àÄ Œµ > 0, ‚àÄ n, ‚àÉ N, ‚àÄ n_1 ‚â• N, u n n_1 ‚â§ Œµ := fun Œµ hŒµ n ‚Ü¶ h_all n Œµ hŒµ
  choose rs hrs using h_all Œµ hŒµ
  refine ‚ü®r ‚äî ‚®Ü n : Finset.range N, rs n, fun v hv ‚Ü¶ ?_‚ü©
  simp only [Set.mem_setOf_eq, iSup_exists, iSup_le_iff, forall_apply_eq_imp_iff]
  intro n
  by_cases hn : n < N
  ¬∑ refine hrs n v ?_
    calc rs n
    _ = rs (‚ü®n, by simp [hn]‚ü© : Finset.range N) := rfl
    _ ‚â§ ‚®Ü n : Finset.range N, rs n := by
      refine le_ciSup (f := fun (x : Finset.range N) ‚Ü¶ rs x) ?_ (‚ü®n, by simp [hn]‚ü© : Finset.range N)
      exact Finite.bddAbove_range _
    _ ‚â§ r ‚äî ‚®Ü n : Finset.range N, rs n := le_max_right _ _
    _ ‚â§ v := hv
  ¬∑ have hn_le : N ‚â§ n := not_lt.mp hn
    specialize h n hn_le
    refine (h_anti n ?_).trans h.le
    calc r
    _ ‚â§ r ‚äî ‚®Ü n : Finset.range N, rs n := le_max_left _ _
    _ ‚â§ v := hv

lemma isTightMeasureSet_of_tendsto_limsup_measure_norm_gt [BorelSpace E]
    [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E] {Œº : ‚Ñï ‚Üí Measure E} [‚àÄ i, IsFiniteMeasure (Œº i)]
    (h : Tendsto (fun r : ‚Ñù ‚Ü¶ limsup (fun n ‚Ü¶ Œº n {x | r < ‚Äñx‚Äñ}) atTop) atTop (ùìù 0)) :
    IsTightMeasureSet {Œº n | n} := by
  refine isTightMeasureSet_of_tendsto_measure_norm_gt ?_
  convert tendsto_iSup_of_tendsto_limsup (fun n ‚Ü¶ ?_) h fun n u v huv ‚Ü¶ ?_ with y
  ¬∑ apply le_antisymm
    ¬∑ simp only [Set.mem_setOf_eq, iSup_exists, iSup_le_iff, forall_apply_eq_imp_iff]
      intro n
      exact le_iSup (fun i ‚Ü¶ Œº i {x | y < ‚Äñx‚Äñ}) n
    ¬∑ simp only [Set.mem_setOf_eq, iSup_exists, iSup_le_iff]
      intro n
      calc Œº n {x | y < ‚Äñx‚Äñ}
      _ ‚â§ ‚®Ü i, ‚®Ü (_ : Œº i = Œº n), Œº i {x | y < ‚Äñx‚Äñ} := le_biSup (fun i ‚Ü¶ Œº i {x | y < ‚Äñx‚Äñ}) rfl
      _ = ‚®Ü i, ‚®Ü (_ : Œº i = Œº n), Œº n {x | y < ‚Äñx‚Äñ} := by
        convert rfl using 4 with m hm
        rw [hm]
      _ ‚â§ ‚®Ü Œº', ‚®Ü i, ‚®Ü (_ : Œº i = Œº'), Œº' {x | y < ‚Äñx‚Äñ} :=
        le_iSup (fun Œº' ‚Ü¶ ‚®Ü i, ‚®Ü (_ : Œº i = Œº'), Œº' {x | y < ‚Äñx‚Äñ}) (Œº n)
  ¬∑ have h_tight : IsTightMeasureSet {Œº n} :=
      isTightMeasureSet_singleton_of_innerRegularWRT
        (innerRegular_isCompact_isClosed_measurableSet_of_finite (Œº n))
    rw [isTightMeasureSet_iff_tendsto_measure_norm_gt] at h_tight
    simpa using h_tight
  ¬∑ refine measure_mono fun x hx ‚Ü¶ ?_
    simp only [Set.mem_setOf_eq] at hx ‚ä¢
    exact huv.trans_lt hx

lemma isTightMeasureSet_of_forall_basis_tendsto
    [InnerProductSpace ‚Ñù E] [FiniteDimensional ‚Ñù E] {S : Set (Measure E)}
    (h : ‚àÄ i, Tendsto (fun (r : ‚Ñù) ‚Ü¶ ‚®Ü Œº ‚àà S, Œº {x | r < |‚ü™Module.finBasis ‚Ñù E i, x‚ü´|})
      atTop (ùìù 0)) :
    IsTightMeasureSet S := by
  refine isTightMeasureSet_of_tendsto_measure_norm_gt ?_
  sorry

lemma isTightMeasureSet_of_forall_basis_tendsto_limsup [BorelSpace E]
    [InnerProductSpace ‚Ñù E] [FiniteDimensional ‚Ñù E] {Œº : ‚Ñï ‚Üí Measure E} [‚àÄ i, IsFiniteMeasure (Œº i)]
    (h : ‚àÄ i, Tendsto (fun (r : ‚Ñù) ‚Ü¶ limsup (fun n ‚Ü¶ Œº n {x | r < |‚ü™Module.finBasis ‚Ñù E i, x‚ü´|})
      atTop) atTop (ùìù 0)) :
    IsTightMeasureSet {Œº n | n} := by
  sorry

/-- Let $(\mu_n)_{n \in \mathbb{N}}$ be measures on $\mathbb{R}^d$ with characteristic functions
$(\hat{\mu}_n)$. If $\hat{\mu}_n$ converges pointwise to a function $f$ which is continuous at 0,
then $(\mu_n)$ is tight. -/
lemma isTightMeasureSet_of_tendsto_charFun [InnerProductSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
    [BorelSpace E]
    {Œº : ‚Ñï ‚Üí Measure E} [‚àÄ i, IsProbabilityMeasure (Œº i)]
    {f : E ‚Üí ‚ÑÇ} (hf : ContinuousAt f 0) (hf_meas : Measurable f)
    (h : ‚àÄ t, Tendsto (fun n ‚Ü¶ charFun (Œº n) t) atTop (ùìù (f t))) :
    IsTightMeasureSet {Œº i | i} := by
  refine isTightMeasureSet_of_forall_basis_tendsto_limsup fun i ‚Ü¶ ?_
  have h_le n r := measure_abs_inner_ge_le_charFun (Œº := Œº n) (a := Module.finBasis ‚Ñù E i) (r := r)
  suffices Tendsto (fun (r : ‚Ñù) ‚Ü¶
        limsup (fun n ‚Ü¶ (Œº n {x | r < |‚ü™Module.finBasis ‚Ñù E i, x‚ü´|}).toReal) atTop)
      atTop (ùìù 0) by
    have h_ofReal r : limsup (fun n ‚Ü¶ Œº n {x | r < |‚ü™Module.finBasis ‚Ñù E i, x‚ü´|}) atTop
        = ENNReal.ofReal
          (limsup (fun n ‚Ü¶ (Œº n {x | r < |‚ü™Module.finBasis ‚Ñù E i, x‚ü´|}).toReal) atTop) := by
      rw [ENNReal.limsup_toReal_eq (b := 1)]
      ¬∑ rw [ENNReal.ofReal_toReal]
        refine ne_of_lt ?_
        calc limsup (fun n ‚Ü¶ (Œº n) {x | r < |inner ((Module.finBasis ‚Ñù E) i) x|}) atTop
        _ ‚â§ 1 := by
          refine limsup_le_of_le ?_ ?_
          ¬∑ exact IsCoboundedUnder.of_frequently_ge <| .of_forall fun _ ‚Ü¶ zero_le'
          ¬∑ exact .of_forall fun _ ‚Ü¶ prob_le_one
        _ < ‚ä§ := by simp
      ¬∑ simp
      ¬∑ exact .of_forall fun _ ‚Ü¶ prob_le_one
    simp_rw [h_ofReal]
    rw [‚Üê ENNReal.ofReal_zero]
    exact ENNReal.tendsto_ofReal this
  have h_le_4 n r (hr : 0 < r) :
      2‚Åª¬π * r * ‚Äñ‚à´ t in -2 * r‚Åª¬π..2 * r‚Åª¬π, 1 - charFun (Œº n) (t ‚Ä¢ Module.finBasis ‚Ñù E i)‚Äñ ‚â§ 4 := by
    have hr' : -(2 * r‚Åª¬π) ‚â§ 2 * r‚Åª¬π := by rw [neg_le_self_iff]; positivity
    calc 2‚Åª¬π * r * ‚Äñ‚à´ t in -2 * r‚Åª¬π..2 * r‚Åª¬π, 1 - charFun (Œº n) (t ‚Ä¢ Module.finBasis ‚Ñù E i)‚Äñ
    _ ‚â§ 2‚Åª¬π * r
        * ‚à´ t in -(2 * r‚Åª¬π)..2 * r‚Åª¬π, ‚Äñ1 - charFun (Œº n) (t ‚Ä¢ Module.finBasis ‚Ñù E i)‚Äñ := by
      simp only [neg_mul, intervalIntegrable_const]
      gcongr
      rw [intervalIntegral.integral_of_le hr', intervalIntegral.integral_of_le hr']
      exact norm_integral_le_integral_norm _
    _ ‚â§ 2‚Åª¬π * r * ‚à´ t in -(2 * r‚Åª¬π)..2 * r‚Åª¬π, 2 := by
      gcongr
      rw [intervalIntegral.integral_of_le hr', intervalIntegral.integral_of_le hr']
      refine integral_mono_of_nonneg ?_ (by fun_prop) ?_
      ¬∑ exact ae_of_all _ fun _ ‚Ü¶ by positivity
      ¬∑ refine ae_of_all _ fun x ‚Ü¶ norm_one_sub_charFun_le_two
    _ ‚â§ 4 := by
      simp only [neg_mul, intervalIntegral.integral_const, sub_neg_eq_add, smul_eq_mul]
      ring_nf
      rw [mul_inv_cancel‚ÇÄ hr.ne', one_mul]
  -- We introduce an upper bound for the limsup.
  -- This is where we use the fact that `charFun (Œº n)` converges to `f`.
  have h_limsup_le r (hr : 0 < r) :
      limsup (fun n ‚Ü¶ (Œº n {x | r < |‚ü™Module.finBasis ‚Ñù E i, x‚ü´|}).toReal) atTop
        ‚â§ 2‚Åª¬π * r * ‚Äñ‚à´ t in -2 * r‚Åª¬π..2 * r‚Åª¬π, 1 - f (t ‚Ä¢ Module.finBasis ‚Ñù E i)‚Äñ := by
    calc limsup (fun n ‚Ü¶ (Œº n {x | r < |‚ü™Module.finBasis ‚Ñù E i, x‚ü´|}).toReal) atTop
    _ ‚â§ limsup (fun n ‚Ü¶ 2‚Åª¬π * r
        * ‚Äñ‚à´ t in -2 * r‚Åª¬π..2 * r‚Åª¬π, 1 - charFun (Œº n) (t ‚Ä¢ Module.finBasis ‚Ñù E i)‚Äñ) atTop := by
      refine limsup_le_limsup (.of_forall fun n ‚Ü¶ h_le n r hr) ?_ ?_
      ¬∑ exact IsCoboundedUnder.of_frequently_ge <| .of_forall fun _ ‚Ü¶ ENNReal.toReal_nonneg
      ¬∑ refine ‚ü®4, ?_‚ü©
        simp only [eventually_map, eventually_atTop, ge_iff_le]
        exact ‚ü®0, fun n _ ‚Ü¶ h_le_4 n r hr‚ü©
    _ = 2‚Åª¬π * r * ‚Äñ‚à´ t in -2 * r‚Åª¬π..2 * r‚Åª¬π, 1 - f (t ‚Ä¢ Module.finBasis ‚Ñù E i)‚Äñ := by
      refine ((Tendsto.norm ?_).const_mul _).limsup_eq
      simp only [neg_mul, intervalIntegrable_const]
      have hr' : -(2 * r‚Åª¬π) ‚â§ 2 * r‚Åª¬π := by rw [neg_le_self_iff]; positivity
      simp_rw [intervalIntegral.integral_of_le hr']
      refine tendsto_integral_of_dominated_convergence (fun _ ‚Ü¶ 2) ?_ (by fun_prop) ?_ ?_
      ¬∑ exact fun _ ‚Ü¶ Measurable.aestronglyMeasurable <| by fun_prop
      ¬∑ exact fun _ ‚Ü¶ ae_of_all _ fun _ ‚Ü¶ norm_one_sub_charFun_le_two
      ¬∑ exact ae_of_all _ fun x ‚Ü¶ tendsto_const_nhds.sub (h _)
  -- It suffices to show that the upper bound tends to 0.
  refine tendsto_of_tendsto_of_tendsto_of_le_of_le' tendsto_const_nhds
    (h := fun r ‚Ü¶ 2‚Åª¬π * r * ‚Äñ‚à´ t in -2 * r‚Åª¬π..2 * r‚Åª¬π, 1 - f (t ‚Ä¢ Module.finBasis ‚Ñù E i)‚Äñ)
    ?_ ?_ ?_
  rotate_left
  ¬∑ filter_upwards [eventually_gt_atTop 0] with r hr
    refine le_limsup_of_le ?_ fun u hu ‚Ü¶ ?_
    ¬∑ refine ‚ü®4, ?_‚ü©
      simp only [eventually_map, eventually_atTop, ge_iff_le]
      exact ‚ü®0, fun n _ ‚Ü¶ (h_le n r hr).trans (h_le_4 n r hr)‚ü©
    ¬∑ exact ENNReal.toReal_nonneg.trans hu.exists.choose_spec
  ¬∑ filter_upwards [eventually_gt_atTop 0] with r hr using h_limsup_le r hr
  -- We now show that the upper bound tends to 0.
  -- This will follow from the fact that `f` is continuous at `0`.
  -- `‚ä¢ Tendsto (fun r ‚Ü¶ 2‚Åª¬π * r * ‚Äñ‚à´ t in -2 * r‚Åª¬π..2 * r‚Åª¬π, 1 - f (t ‚Ä¢ Module.finBasis ‚Ñù E i)‚Äñ)`
  --    `atTop (ùìù 0)`
  have hf_tendsto := hf.tendsto
  rw [Metric.tendsto_nhds_nhds] at hf_tendsto
  rw [Metric.tendsto_atTop]
  intro Œµ hŒµ
  have hf0 : f 0 = 1 := by symm; simpa using h 0
  simp only [gt_iff_lt, dist_eq_norm_sub', zero_sub, norm_neg, hf0] at hf_tendsto
  simp only [ge_iff_le, neg_mul, intervalIntegrable_const, dist_zero_right, norm_mul, norm_inv,
    Real.norm_ofNat, Real.norm_eq_abs, norm_norm]
  simp_rw [abs_of_nonneg (norm_nonneg _)]
  obtain ‚ü®Œ¥, hŒ¥, hŒ¥_lt‚ü© : ‚àÉ Œ¥, 0 < Œ¥ ‚àß ‚àÄ ‚¶Éx : E‚¶Ñ, ‚Äñx‚Äñ < Œ¥ ‚Üí ‚Äñ1 - f x‚Äñ < Œµ / 4 :=
    hf_tendsto (Œµ / 4) (by positivity)
  have h_norm_basis_pos : 0 < ‚ÄñModule.finBasis ‚Ñù E i‚Äñ := by
    simp only [norm_pos_iff, ne_eq]
    exact Basis.ne_zero (Module.finBasis ‚Ñù E) i
  refine ‚ü®4 * Œ¥‚Åª¬π * ‚ÄñModule.finBasis ‚Ñù E i‚Äñ, fun r hrŒ¥ ‚Ü¶ ?_‚ü©
  have hr : 0 < r := lt_of_lt_of_le (by positivity) hrŒ¥
  have hr' : -(2 * r‚Åª¬π) ‚â§ 2 * r‚Åª¬π := by rw [neg_le_self_iff]; positivity
  have h_le_Ioc x (hx : x ‚àà Set.Ioc (-(2 * r‚Åª¬π)) (2 * r‚Åª¬π)) :
      ‚Äñ1 - f (x ‚Ä¢ Module.finBasis ‚Ñù E i)‚Äñ ‚â§ Œµ / 4 := by
    refine (hŒ¥_lt ?_).le
    rw [norm_smul]
    calc ‚Äñx‚Äñ * ‚ÄñModule.finBasis ‚Ñù E i‚Äñ
    _ ‚â§ 2 * r‚Åª¬π * ‚ÄñModule.finBasis ‚Ñù E i‚Äñ := by
      gcongr
      simp only [Real.norm_eq_abs, abs_le]
      simp only [Set.mem_Ioc] at hx
      exact ‚ü®hx.1.le, hx.2‚ü©
    _ < Œ¥ * ‚ÄñModule.finBasis ‚Ñù E i‚Äñ‚Åª¬π * ‚ÄñModule.finBasis ‚Ñù E i‚Äñ := by
      rw [mul_lt_mul_right h_norm_basis_pos, ‚Üê lt_div_iff‚ÇÄ' (by positivity),
        inv_lt_comm‚ÇÄ hr (by positivity)]
      refine lt_of_lt_of_le ?_ hrŒ¥
      ring_nf
      rw [mul_comm Œ¥‚Åª¬π, inv_inv]
      gcongr
      norm_num
    _ ‚â§ Œ¥ := by
      rw [mul_assoc, inv_mul_cancel‚ÇÄ, mul_one]
      simp only [ne_eq, norm_eq_zero]
      exact Basis.ne_zero (Module.finBasis ‚Ñù E) i
  rw [abs_of_nonneg hr.le]
  calc 2‚Åª¬π * r * ‚Äñ‚à´ t in -(2 * r‚Åª¬π)..2 * r‚Åª¬π, 1 - f (t ‚Ä¢ Module.finBasis ‚Ñù E i)‚Äñ
  _ ‚â§ 2‚Åª¬π * r * ‚à´ t in -(2 * r‚Åª¬π)..2 * r‚Åª¬π, ‚Äñ1 - f (t ‚Ä¢ Module.finBasis ‚Ñù E i)‚Äñ := by
    gcongr
    rw [intervalIntegral.integral_of_le hr', intervalIntegral.integral_of_le hr']
    exact norm_integral_le_integral_norm _
  _ ‚â§ 2‚Åª¬π * r * ‚à´ t in -(2 * r‚Åª¬π)..2 * r‚Åª¬π, Œµ / 4 := by
    gcongr
    rw [intervalIntegral.integral_of_le hr', intervalIntegral.integral_of_le hr']
    refine integral_mono_ae ?_ (by fun_prop) ?_
    ¬∑ refine Integrable.mono' (integrable_const (Œµ / 4)) ?_ ?_
      ¬∑ exact Measurable.aestronglyMeasurable <| by fun_prop
      ¬∑ simp_rw [norm_norm]
        exact ae_restrict_of_forall_mem measurableSet_Ioc h_le_Ioc
    ¬∑ exact ae_restrict_of_forall_mem measurableSet_Ioc h_le_Ioc
  _ = Œµ / 2 := by
    simp only [intervalIntegral.integral_div, intervalIntegral.integral_const, sub_neg_eq_add,
      smul_eq_mul]
    ring_nf
    rw [mul_inv_cancel‚ÇÄ hr.ne', one_mul]
  _ < Œµ := by simp [hŒµ]

end FiniteDimensional

variable {Œπ : Type*} [InnerProductSpace ‚Ñù E] {Œº : Œπ ‚Üí Measure E} [‚àÄ i, IsProbabilityMeasure (Œº i)]

section EquicontinuousAt

lemma equicontinuousAt_charFun_zero_of_isTightMeasureSet (hŒº : IsTightMeasureSet {Œº i | i}) :
    EquicontinuousAt (fun i ‚Ü¶ charFun (Œº i)) 0 := by
  sorry

lemma isTightMeasureSet_of_equicontinuousAt_charFun
    (hŒº : EquicontinuousAt (fun i ‚Ü¶ charFun (Œº i)) 0) :
    IsTightMeasureSet {Œº i | i} := by
  sorry

lemma isTightMeasureSet_iff_equicontinuousAt_charFun :
    IsTightMeasureSet {Œº i | i} ‚Üî EquicontinuousAt (fun i ‚Ü¶ charFun (Œº i)) 0 :=
  ‚ü®equicontinuousAt_charFun_zero_of_isTightMeasureSet,
    isTightMeasureSet_of_equicontinuousAt_charFun‚ü©

end EquicontinuousAt
