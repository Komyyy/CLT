/-
Copyright (c) 2024 Thomas Zhu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Thomas Zhu, R√©my Degenne
-/
import Mathlib.Probability.Distributions.Gaussian
import Mathlib.Analysis.SpecialFunctions.Gaussian.FourierTransform
import Clt.CharFun
import Clt.MomentGenerating

/-!
Properties of Gaussian distributions and its characteristic function.
-/

noncomputable section

open MeasureTheory ProbabilityTheory Complex NormedSpace
open scoped ENNReal NNReal Real Topology

namespace ProbabilityTheory

variable (Œº : ‚Ñù) (v : ‚Ñù‚â•0) {t : ‚Ñù}

-- `‚àó` notation not used because of ambiguous notation : `conv` vs `mconv`
lemma gaussianReal_conv_gaussianReal {m‚ÇÅ m‚ÇÇ : ‚Ñù} {v‚ÇÅ v‚ÇÇ : ‚Ñù‚â•0} :
    Measure.conv (gaussianReal m‚ÇÅ v‚ÇÅ) (gaussianReal m‚ÇÇ v‚ÇÇ) = gaussianReal (m‚ÇÅ + m‚ÇÇ) (v‚ÇÅ + v‚ÇÇ) := by
  refine Measure.ext_of_charFun ?_
  ext t
  rw [charFun_conv]
  simp_rw [charFun_gaussianReal]
  rw [‚Üê Complex.exp_add]
  simp only [ofReal_add, NNReal.coe_add]
  congr
  ring

lemma gaussianReal_map_prod_add {m‚ÇÅ m‚ÇÇ : ‚Ñù} {v‚ÇÅ v‚ÇÇ : ‚Ñù‚â•0} :
    ((gaussianReal m‚ÇÅ v‚ÇÅ).prod (gaussianReal m‚ÇÇ v‚ÇÇ)).map (fun p ‚Ü¶ p.1 + p.2)
      = gaussianReal (m‚ÇÅ + m‚ÇÇ) (v‚ÇÅ + v‚ÇÇ) :=
  gaussianReal_conv_gaussianReal

section Def

variable {E : Type*} [TopologicalSpace E] [AddCommMonoid E] [Module ‚Ñù E] {mE : MeasurableSpace E}

class IsGaussian (Œº : Measure E) : Prop where
  map_eq_gaussianReal : ‚àÄ L : E ‚ÜíL[‚Ñù] ‚Ñù, ‚àÉ m v, Œº.map L = gaussianReal m v

def _root_.MeasureTheory.Measure.meanMap (Œº : Measure E) [IsGaussian Œº] (L : E ‚ÜíL[‚Ñù] ‚Ñù) : ‚Ñù :=
  (IsGaussian.map_eq_gaussianReal (Œº := Œº) L).choose

def _root_.MeasureTheory.Measure.varMap (Œº : Measure E) [IsGaussian Œº] (L : E ‚ÜíL[‚Ñù] ‚Ñù) :
    ‚Ñù‚â•0 :=
  (IsGaussian.map_eq_gaussianReal (Œº := Œº) L).choose_spec.choose

lemma _root_.MeasureTheory.Measure.map_eq_gaussianReal (Œº : Measure E) [IsGaussian Œº]
    (L : E ‚ÜíL[‚Ñù] ‚Ñù) :
    Œº.map L = gaussianReal (Œº.meanMap L) (Œº.varMap L) :=
  (IsGaussian.map_eq_gaussianReal L).choose_spec.choose_spec

end Def

instance isGaussian_gaussianReal (m : ‚Ñù) (v : ‚Ñù‚â•0) : IsGaussian (gaussianReal m v) where
  map_eq_gaussianReal L := by
    have : (L : ‚Ñù ‚Üí ‚Ñù) = fun x ‚Ü¶ L 1 * x := by
      ext x
      have : x = x ‚Ä¢ 1 := by simp
      conv_lhs => rw [this, L.map_smul, smul_eq_mul, mul_comm]
    rw [this]
    exact ‚ü®L 1 * m, ‚ü®(L 1) ^ 2, sq_nonneg _‚ü© * v, gaussianReal_map_const_mul _‚ü©

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {mE : MeasurableSpace E} [BorelSpace E] [SecondCountableTopology E]

instance {Œº : Measure E} [IsGaussian Œº] : IsProbabilityMeasure Œº where
  measure_univ := by
    let L : E ‚ÜíL[‚Ñù] ‚Ñù := Nonempty.some inferInstance
    have : Œº.map L Set.univ = 1 := by simp [Œº.map_eq_gaussianReal L]
    simpa [Measure.map_apply (by fun_prop : Measurable L) .univ] using this

lemma isGaussian_map_prod_add {Œº ŒΩ : Measure E} [IsGaussian Œº] [IsGaussian ŒΩ] :
    IsGaussian ((Œº.prod ŒΩ).map (fun p ‚Ü¶ p.1 + p.2)) where
  map_eq_gaussianReal := by
    intro L
    rw [Measure.map_map (by fun_prop) (by fun_prop)]
    have : (L ‚àò fun (p : E √ó E) ‚Ü¶ p.1 + p.2)
        = (fun p : ‚Ñù √ó ‚Ñù ‚Ü¶ p.1 + p.2) ‚àò (Prod.map L L) := by ext; simp
    rw [this, ‚Üê Measure.map_map (by fun_prop) (by fun_prop)]
    refine ‚ü®Œº.meanMap L + ŒΩ.meanMap L, Œº.varMap L + ŒΩ.varMap L, ?_‚ü©
    rw [‚Üê Measure.map_prod_map, Œº.map_eq_gaussianReal L, ŒΩ.map_eq_gaussianReal L,
      gaussianReal_map_prod_add]
    ¬∑ fun_prop
    ¬∑ fun_prop

lemma isGaussian_conv {Œº ŒΩ : Measure E} [IsGaussian Œº] [IsGaussian ŒΩ] :
    IsGaussian (Œº ‚àó ŒΩ) := isGaussian_map_prod_add




lemma integrable_exp_mul_gaussianReal (t : ‚Ñù) :
    Integrable (fun x ‚Ü¶ rexp (t * x)) (gaussianReal Œº v) := by
  rw [‚Üê mgf_pos_iff, mgf_gaussianReal (Œº := Œº) (v := v) (by simp)]
  exact Real.exp_pos _

@[simp]
lemma integrableExpSet_id_gaussianReal : integrableExpSet id (gaussianReal Œº v) = Set.univ := by
  ext
  simpa [integrableExpSet] using integrable_exp_mul_gaussianReal _ _ _

lemma memLp_id_gaussianReal (p : ‚Ñù‚â•0) : MemLp id p (gaussianReal Œº v) :=
  memLp_of_mem_interior_integrableExpSet (by simp) p

lemma integrable_pow_gaussianReal {n : ‚Ñï} :
    Integrable (fun x ‚Ü¶ |x| ^ n) (gaussianReal Œº v) := by
  have h := (memLp_id_gaussianReal Œº v n).integrable_norm_pow
  simp only [ne_eq, id_eq, Real.norm_eq_abs] at h
  by_cases hn : n = 0
  ¬∑ simp [hn]
  ¬∑ exact h hn

omit [SecondCountableTopology E] in
lemma IsGaussian.memLp_continuousLinearMap (Œº : Measure E) [IsGaussian Œº] (L : E ‚ÜíL[‚Ñù] ‚Ñù) :
    MemLp L 2 Œº := by
  suffices MemLp (id ‚àò L) 2 Œº from this
  rw [‚Üê memLp_map_measure_iff, Œº.map_eq_gaussianReal L]
  ¬∑ exact memLp_id_gaussianReal _ _ _
  ¬∑ exact Measurable.aestronglyMeasurable <| by fun_prop
  ¬∑ fun_prop

section CharFun

open BoundedContinuousFunction Real

lemma IsBoundedBilinearMap.symm {E F G ùïú : Type*} [NontriviallyNormedField ùïú]
    [SeminormedAddCommGroup E] [NormedSpace ùïú E] [SeminormedAddCommGroup F] [NormedSpace ùïú F]
    [SeminormedAddCommGroup G] [NormedSpace ùïú G]
    {f : E √ó F ‚Üí G} (h : IsBoundedBilinearMap ùïú f) :
    IsBoundedBilinearMap ùïú (fun p ‚Ü¶ f (p.2, p.1)) where
  add_left x‚ÇÅ x‚ÇÇ y := h.add_right _ _ _
  smul_left c x y := h.smul_right _ _ _
  add_right x y‚ÇÅ y‚ÇÇ := h.add_left _ _ _
  smul_right c x y := h.smul_left _ _ _
  bound := by
    obtain ‚ü®C, hC_pos, hC‚ü© := h.bound
    exact ‚ü®C, hC_pos, fun x y ‚Ü¶ (hC y x).trans_eq (by ring)‚ü©

namespace BoundedContinuousFunction

variable {E : Type*} [SeminormedAddCommGroup E] [NormedSpace ‚Ñù E]

noncomputable
def probCharCLM (L : E ‚ÜíL[‚Ñù] ‚Ñù) : E ‚Üí·µá ‚ÑÇ :=
  char continuous_probChar (L := isBoundedBilinearMap_apply.symm.toContinuousLinearMap.toLinearMap‚ÇÇ)
    isBoundedBilinearMap_apply.symm.continuous L

lemma probCharCLM_apply (L : E ‚ÜíL[‚Ñù] ‚Ñù) (x : E) : probCharCLM L x = exp (L x * I) := rfl

@[simp]
lemma probCharCLM_zero : probCharCLM (0 : E ‚ÜíL[‚Ñù] ‚Ñù) = 1 := by simp [probCharCLM]

end BoundedContinuousFunction

open BoundedContinuousFunction

def charFunCLM {Œº : Measure E} (L : E ‚ÜíL[‚Ñù] ‚Ñù) : ‚ÑÇ := ‚à´ v, probCharCLM L v ‚àÇŒº

end CharFun

section Fernique

theorem fernique (Œº : Measure E) [IsGaussian Œº] :
    ‚àÉ C, 0 < C ‚àß Integrable (fun x ‚Ü¶ rexp (C * ‚Äñx‚Äñ ^ 2)) Œº := by
  sorry

-- Corollary of Fernique's theorem
lemma IsGaussian.memL2_id (Œº : Measure E) [IsGaussian Œº] : MemLp id 2 Œº := by
  sorry

end Fernique

section Covariance

/-- `MemLp.toLp` as a `LinearMap` from the continuous linear maps. -/
def ContinuousLinearMap.toLp‚Çó (Œº : Measure E) [IsGaussian Œº] :
    (E ‚ÜíL[‚Ñù] ‚Ñù) ‚Üí‚Çó[‚Ñù] Lp ‚Ñù 2 Œº where
  toFun := fun L ‚Ü¶ MemLp.toLp L (IsGaussian.memLp_continuousLinearMap Œº L)
  map_add' u v := by push_cast; rw [MemLp.toLp_add]
  map_smul' c L := by push_cast; rw [MemLp.toLp_const_smul]; rfl

omit [SecondCountableTopology E] in
@[simp]
lemma ContinuousLinearMap.toLp‚Çó_apply {Œº : Measure E} [IsGaussian Œº] (L : E ‚ÜíL[‚Ñù] ‚Ñù) :
    L.toLp‚Çó Œº = MemLp.toLp L (IsGaussian.memLp_continuousLinearMap Œº L) := rfl

lemma norm_toLp‚Çó_le (Œº : Measure E) [IsGaussian Œº] (L : E ‚ÜíL[‚Ñù] ‚Ñù) :
    ‚ÄñL.toLp‚Çó Œº‚Äñ ‚â§ ‚ÄñL‚Äñ * (eLpNorm id 2 Œº).toReal := by
  suffices ‚ÄñL.toLp‚Çó Œº‚Äñ ‚â§ (‚ÄñL‚Äñ‚Çë ^ 2 * ‚à´‚Åª x, ‚Äñx‚Äñ‚Çë ^ 2 ‚àÇŒº).toReal ^ (2 : ‚Ñù)‚Åª¬π by
    refine this.trans_eq ?_
    simp only [ENNReal.toReal_mul, ENNReal.toReal_pow, toReal_enorm]
    rw [Real.mul_rpow (by positivity) (by positivity), ‚Üê Real.rpow_natCast_mul (by positivity),
      ENNReal.toReal_rpow]
    simp [eLpNorm_eq_lintegral_rpow_enorm (by simp : (2 : ‚Ñù‚â•0‚àû) ‚â† 0) (by simp : 2 ‚â† ‚àû)]
  rw [ContinuousLinearMap.toLp‚Çó_apply, Lp.norm_toLp,
    eLpNorm_eq_lintegral_rpow_enorm (by simp : (2 : ‚Ñù‚â•0‚àû) ‚â† 0) (by simp : 2 ‚â† ‚àû)]
  simp only [ENNReal.toReal_ofNat, ENNReal.rpow_ofNat, one_div]
  refine ENNReal.toReal_le_of_le_ofReal (by positivity) ?_
  suffices ‚à´‚Åª x, ‚ÄñL x‚Äñ‚Çë ^ 2 ‚àÇŒº ‚â§ ‚ÄñL‚Äñ‚Çë ^ 2 * ‚à´‚Åª x, ‚Äñx‚Äñ‚Çë ^ 2 ‚àÇŒº by
    rw [‚Üê ENNReal.ofReal_rpow_of_nonneg (by positivity) (by positivity)]
    gcongr
    rwa [ENNReal.ofReal_toReal]
    refine ENNReal.mul_ne_top (by simp) ?_
    have h := (IsGaussian.memL2_id Œº).eLpNorm_ne_top
    rw [eLpNorm_eq_lintegral_rpow_enorm (by simp : (2 : ‚Ñù‚â•0‚àû) ‚â† 0) (by simp : 2 ‚â† ‚àû)] at h
    simpa using h
  calc ‚à´‚Åª x, ‚ÄñL x‚Äñ‚Çë ^ 2 ‚àÇŒº
  _ ‚â§ ‚à´‚Åª x, ‚ÄñL‚Äñ‚Çë ^ 2 * ‚Äñx‚Äñ‚Çë ^ 2 ‚àÇŒº := by
    refine lintegral_mono fun x ‚Ü¶ ?_
    rw [‚Üê mul_pow]
    gcongr
    simp_rw [‚Üê ofReal_norm]
    rw [‚Üê ENNReal.ofReal_mul (by positivity)]
    gcongr
    exact L.le_opNorm x
  _ = ‚ÄñL‚Äñ‚Çë ^ 2 * ‚à´‚Åª x, ‚Äñx‚Äñ‚Çë ^ 2 ‚àÇŒº := by rw [lintegral_const_mul]; fun_prop

/-- `MemLp.toLp` as a `ContinuousLinearMap` from the continuous linear maps. -/
def ContinuousLinearMap.toLp (Œº : Measure E) [IsGaussian Œº] : (E ‚ÜíL[‚Ñù] ‚Ñù) ‚ÜíL[‚Ñù] Lp ‚Ñù 2 Œº where
  toLinearMap := ContinuousLinearMap.toLp‚Çó Œº
  cont := by
    refine LinearMap.continuous_of_locally_bounded _ fun s hs ‚Ü¶ ?_
    rw [image_isVonNBounded_iff]
    simp_rw [isVonNBounded_iff'] at hs
    obtain ‚ü®r, hxr‚ü© := hs
    refine ‚ü®r * (eLpNorm id 2 Œº).toReal, fun L hLs ‚Ü¶ ?_‚ü©
    specialize hxr L hLs
    refine (norm_toLp‚Çó_le Œº L).trans ?_
    gcongr

@[simp]
lemma ContinuousLinearMap.toLp_apply {Œº : Measure E} [IsGaussian Œº] (L : E ‚ÜíL[‚Ñù] ‚Ñù) :
    L.toLp Œº = MemLp.toLp L (IsGaussian.memLp_continuousLinearMap Œº L) := rfl

/-- Covariance operator of a Gaussian measure. -/
def covarianceOperator (Œº : Measure E) [IsGaussian Œº] : (E ‚ÜíL[‚Ñù] ‚Ñù) ‚ÜíL[‚Ñù] (E ‚ÜíL[‚Ñù] ‚Ñù) ‚ÜíL[‚Ñù] ‚Ñù :=
  ContinuousLinearMap.bilinearComp (continuousBilinFormOfInner (E := Lp ‚Ñù 2 Œº))
    (ContinuousLinearMap.toLp Œº) (ContinuousLinearMap.toLp Œº)

lemma covarianceOperator_apply {Œº : Measure E} [IsGaussian Œº] (L‚ÇÅ L‚ÇÇ : E ‚ÜíL[‚Ñù] ‚Ñù) :
    covarianceOperator Œº L‚ÇÅ L‚ÇÇ = ‚à´ x, L‚ÇÅ x * L‚ÇÇ x ‚àÇŒº := by
  sorry

end Covariance

end ProbabilityTheory
