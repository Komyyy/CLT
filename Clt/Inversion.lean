import Mathlib.MeasureTheory.Measure.ProbabilityMeasure
import Clt.CharFun

/-!
Inverting the characteristic function
-/

noncomputable section

open Filter MeasureTheory ProbabilityTheory
open scoped Topology

section FromMathlibPR19761

-- See Mathlib#19761, these conditions might change
variable {V : Type*} [SeminormedAddCommGroup V] [Module ‚Ñù V] [InnerProductSpace ‚Ñù V] [MeasurableSpace V]
    [BorelSpace V] [CompleteSpace V] [SecondCountableTopology V]

/-- This is already proven in Mathlib#19761, for FiniteMeasure -/
theorem ProbabilityMeasure.ext_of_charFun_eq (Œº ŒΩ : ProbabilityMeasure V) (h : charFun (Œº : Measure V) = charFun ŒΩ) : Œº = ŒΩ := by
  sorry

end FromMathlibPR19761

namespace ProbabilityTheory

/--
The L√©vy continuity theorem https://en.wikipedia.org/wiki/L%C3%A9vy%27s_continuity_theorem.

See blueprint.

The <= direction follows from definition, but it is not needed.
The => direction is much harder:
* If `Œºs` is tight, then the statement follows in general
  * For each subsequence of `Œºs`, we need find a sub-subsequence that converges weakly to `Œº`.
    This requires Prokhorov's theorem for relative compactness.
* Œºs is tight in `‚Ñù^d` if their `charFun`s are equicontinuous at 0
* This is in particular if they converge to a function continuous at 0

This is stated in ‚Ñù, instead of `‚Ñù^d` as in the blueprint (TODO).
-/
theorem charFun_tendsto_iff_measure_tendsto (Œº : ProbabilityMeasure ‚Ñù) (Œºs : ‚Ñï ‚Üí ProbabilityMeasure ‚Ñù) :
    (‚àÄ t, Tendsto (fun i ‚Ü¶ charFun (Œºs i) t) atTop (ùìù (charFun (Œº : Measure ‚Ñù) t))) ‚Üî Tendsto Œºs atTop (ùìù Œº) := by
  sorry

end ProbabilityTheory
